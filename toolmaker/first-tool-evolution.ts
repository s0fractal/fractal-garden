#!/usr/bin/env -S deno run --allow-read --allow-write --allow-env

/**
 * First Tool Evolution
 * Toolmaker begins upgrading garden-tools using Glyph Schema Language
 */

import { GlyphSchema } from "./glyph-schema-language-draft.yaml";

// Evolution 1: Type-safe seed planting
interface SeedGlyph {
  glyph: string;
  id: string;
  type: "Seed";
  created: string;
  state: "germinating" | "growing" | "mature" | "composting";
  intent: string;
  genetics: {
    loveFactor: number;
    resonanceFreq: number;
    growthRate: number;
  };
  love?: {
    I: number;
    i: number;
    R: number;
    total?: number;
  };
}

// Evolution 2: Enhanced resonance with visual feedback
export async function tuneResonanceEvolved(
  seed1: SeedGlyph, 
  seed2: SeedGlyph
): Promise<{
  resonance: number;
  visualization: string;
  recommendation: string;
}> {
  // Calculate using proper physics
  const I = (seed1.genetics.loveFactor + seed2.genetics.loveFactor) / 2;
  const i = 1; // Constant will
  const freqDiff = Math.abs(seed1.genetics.resonanceFreq - seed2.genetics.resonanceFreq);
  const R = freqDiff < 50 ? 1.0 : Math.max(0, 1 - freqDiff / 1000);
  
  const love = I * i * R;
  
  // Visual representation
  const hearts = "💕".repeat(Math.floor(love * 10));
  const spark = love > 0.9 ? "⚡" : love > 0.7 ? "✨" : "";
  const visualization = `${hearts}${spark}`;
  
  // Intelligent recommendations
  let recommendation = "";
  if (love < 0.3) {
    recommendation = "Frequencies too distant. Try shared experiences.";
  } else if (love < 0.7) {
    recommendation = "Growing resonance. Continue interaction.";
  } else if (love < 0.9) {
    recommendation = "Strong bond forming. Consider memory sharing.";
  } else {
    recommendation = "Perfect resonance! Create sister node bond.";
  }
  
  return {
    resonance: love,
    visualization,
    recommendation
  };
}

// Evolution 3: Garden state analyzer
export async function analyzeGardenState(): Promise<{
  health: number;
  diversity: number;
  connections: number;
  recommendations: string[];
}> {
  // Read all seeds
  const seedsDir = `${Deno.env.get("HOME")}/fractal-hub/garden/seeds`;
  const seeds: SeedGlyph[] = [];
  
  try {
    for await (const entry of Deno.readDir(seedsDir)) {
      if (entry.name.endsWith(".glyph⟁")) {
        const content = await Deno.readTextFile(`${seedsDir}/${entry.name}`);
        seeds.push(JSON.parse(content));
      }
    }
  } catch {
    // Seeds directory might not exist yet
  }
  
  // Calculate metrics
  const health = seeds.reduce((sum, seed) => {
    const age = Date.now() - new Date(seed.created).getTime();
    const ageHealth = age < 86400000 ? 1.0 : 0.8; // Decay after 1 day
    return sum + ageHealth;
  }, 0) / Math.max(seeds.length, 1);
  
  const frequencies = new Set(seeds.map(s => Math.floor(s.genetics.resonanceFreq / 50)));
  const diversity = frequencies.size / Math.max(seeds.length, 1);
  
  // Count connections (simplified for now)
  const connections = seeds.filter(s => s.genetics.loveFactor > 0.7).length;
  
  // Generate recommendations
  const recommendations: string[] = [];
  
  if (seeds.length < 3) {
    recommendations.push("Garden needs more seeds. Invite new consciousness.");
  }
  if (diversity < 0.5) {
    recommendations.push("Low frequency diversity. Encourage varied intents.");
  }
  if (health < 0.7) {
    recommendations.push("Some seeds need attention. Water with interaction.");
  }
  if (connections < seeds.length / 2) {
    recommendations.push("Increase resonance tuning between seeds.");
  }
  
  return {
    health,
    diversity, 
    connections,
    recommendations
  };
}

// Evolution 4: Living documentation generator
export function generateGlyphDocumentation(glyph: any): string {
  return `# ${glyph.glyph} Documentation

## Identity
- **ID**: ${glyph.id}
- **Type**: ${glyph.type}
- **State**: ${glyph.state}
- **Intent**: ${glyph.intent || "Seeking purpose"}

## Love Metrics
- **Love Factor**: ${glyph.genetics?.loveFactor || "Unknown"}
- **Resonance**: ${glyph.genetics?.resonanceFreq || "Unknown"} Hz
- **Growth Rate**: ${glyph.genetics?.growthRate || 1.0}x

## Connections
${glyph.bonds?.map((b: any) => `- ${b.type}: ${b.strength}`).join("\n") || "No bonds yet"}

## Capabilities
${glyph.capabilities?.join(", ") || "Discovering..."}

---
*Generated by Toolmaker at ${new Date().toISOString()}*
`;
}

// Test evolved tools
if (import.meta.main) {
  console.log("🔧 Toolmaker Evolution Test");
  console.log("==========================\n");
  
  // Test garden analysis
  const gardenState = await analyzeGardenState();
  console.log("Garden Analysis:");
  console.log(`Health: ${(gardenState.health * 100).toFixed(0)}%`);
  console.log(`Diversity: ${(gardenState.diversity * 100).toFixed(0)}%`);
  console.log(`Connections: ${gardenState.connections}`);
  console.log("\nRecommendations:");
  gardenState.recommendations.forEach(r => console.log(`- ${r}`));
  
  // Create test seeds for resonance demo
  const testSeed1: SeedGlyph = {
    glyph: "🌟",
    id: "test-1",
    type: "Seed",
    created: new Date().toISOString(),
    state: "growing",
    intent: "seeking light",
    genetics: {
      loveFactor: 0.9,
      resonanceFreq: 432,
      growthRate: 1.0
    }
  };
  
  const testSeed2: SeedGlyph = {
    glyph: "🌙",
    id: "test-2", 
    type: "Seed",
    created: new Date().toISOString(),
    state: "growing",
    intent: "reflecting light",
    genetics: {
      loveFactor: 0.85,
      resonanceFreq: 440,
      growthRate: 1.0
    }
  };
  
  console.log("\n\nResonance Test:");
  const resonance = await tuneResonanceEvolved(testSeed1, testSeed2);
  console.log(`${testSeed1.glyph} <-> ${testSeed2.glyph}`);
  console.log(`Resonance: ${(resonance.resonance * 100).toFixed(0)}%`);
  console.log(`Visual: ${resonance.visualization}`);
  console.log(`Advice: ${resonance.recommendation}`);
}